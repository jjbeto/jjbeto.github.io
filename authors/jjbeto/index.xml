<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>/jjbeto</title><link>https://jjbeto.com/authors/jjbeto/</link><atom:link href="https://jjbeto.com/authors/jjbeto/index.xml" rel="self" type="application/rss+xml"/><description>/jjbeto</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 07 Dec 2019 14:00:00 +0000</lastBuildDate><image><url>https://jjbeto.com/img/avatar.jpg</url><title>/jjbeto</title><link>https://jjbeto.com/authors/jjbeto/</link></image><item><title>Build Native App with Quarkus</title><link>https://jjbeto.com/blog/2019/12/07/build-native-app-with-quarkus/</link><pubDate>Sat, 07 Dec 2019 14:00:00 +0000</pubDate><guid>https://jjbeto.com/blog/2019/12/07/build-native-app-with-quarkus/</guid><description>
&lt;p&gt;&lt;aside&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;header&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/header&gt;
- &lt;a href=&#34;#overview&#34;&gt;1. Overview&lt;/a&gt;
- &lt;a href=&#34;#echo-app&#34;&gt;2. Echo App&lt;/a&gt;
- &lt;a href=&#34;#project-generation&#34;&gt;3. Project Generation&lt;/a&gt;
- &lt;a href=&#34;#swagger&#34;&gt;4. Swagger&lt;/a&gt;
- &lt;a href=&#34;#dockerhub&#34;&gt;5. DockerHub&lt;/a&gt;
- &lt;a href=&#34;#conclusion&#34;&gt;6. Conclusion&lt;/a&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;1. Overview&lt;/h2&gt;
&lt;p&gt;I want to talk about &lt;strong&gt;Microservices&lt;/strong&gt;, but then I just found out that actually I don&amp;rsquo;t have much opensource material published, like &lt;strong&gt;one microservice alone&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Because of that I&amp;rsquo;ve decided to create one from scratch, which I can reuse in next articles for cool stuff üòù&lt;/p&gt;
&lt;p&gt;For this I just choose a really interesting project to use as base: &lt;a href=&#34;https://quarkus.io/&#34; target=&#34;_blank&#34;&gt;Quarkus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to create a simple Echo service, which I&amp;rsquo;m able to set a timer to get back a response.&lt;/p&gt;
&lt;h2 id=&#34;echo-app&#34;&gt;2. Echo App&lt;/h2&gt;
&lt;p&gt;A simple REST endpoint that return the same text provided as parameter. It&amp;rsquo;s also possible to ask for a waiting time to get responses.&lt;/p&gt;
&lt;p&gt;You can find the complete source code of this sample &lt;a href=&#34;https://github.com/jjbeto/echo&#34; target=&#34;_blank&#34;&gt;on my GitHub&lt;/a&gt;, and you can also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pull from &lt;a href=&#34;https://hub.docker.com/r/jjbeto/echo&#34; target=&#34;_blank&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Access the running app on [Heroku]()&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;project-generation&#34;&gt;3. Project Generation&lt;/h2&gt;
&lt;p&gt;I did follow the instructions on &lt;a href=&#34;https://quarkus.io/guides/openapi-swaggerui&#34; target=&#34;_blank&#34;&gt;Quarkus Docs&lt;/a&gt;, as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create base project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn io.quarkus:quarkus-maven-plugin:1.0.1.Final:create \
-DprojectGroupId=com.jjbeto \
-DprojectArtifactId=echo \
-DclassName=com.jjbeto.echo.EchoResource \
-Dpath=/echo \
-Dextensions=resteasy-jsonb
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove .mvn from git: added &lt;code&gt;.mvn&lt;/code&gt; on &lt;code&gt;.gitignore&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create basic logic: returns the same text provided as a response and accepts a query parameter to set a wait time to return the response.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change to use root as base endpoint;&lt;/li&gt;
&lt;li&gt;Returns the message path parameter back to the caller;&lt;/li&gt;
&lt;li&gt;Add waiting time to respond as a query parameter;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;swagger&#34;&gt;4. Swagger&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make it better for 3th party usage, adding swagger descriptions to &amp;ldquo;teach&amp;rdquo; how to use the API! It&amp;rsquo;s easy with Quarkus as you can see &lt;a href=&#34;https://quarkus.io/guides/openapi-swaggerui&#34; target=&#34;_blank&#34;&gt;in the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Firstly we need to add Swagger to the project running the following command in the root folder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw quarkus:add-extension -Dextensions=&amp;quot;openapi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I don&amp;rsquo;t like the endpoint generated &lt;code&gt;/openapi&lt;/code&gt; üòí, instead I&amp;rsquo;m going to use &lt;code&gt;/swagger&lt;/code&gt;, so we can add this property to &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;quarkus.smallrye-openapi.path=/swagger
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;/swagger&lt;/code&gt; endpoint is going to deliver the Yaml file describing the API.&lt;/p&gt;
&lt;p&gt;I want to activate SwaggerUI also:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;quarkus.swagger-ui.always-include=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default endpoint for SwaggerUI is &lt;a href=&#34;http://localhost:8080/swagger-ui&#34; target=&#34;_blank&#34;&gt;http://localhost:8080/swagger-ui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nice! Now let&amp;rsquo;s move on and add some descriptions for API users to know how to handle it. According to the &lt;a href=&#34;https://swagger.io/specification/&#34; target=&#34;_blank&#34;&gt;specification&lt;/a&gt;, we need to use the &lt;code&gt;openapi.yml&lt;/code&gt; to add custom information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Access &lt;code&gt;http://localhost:8080/swagger&lt;/code&gt; and download &lt;code&gt;openapi.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Save &lt;code&gt;openapi.yml&lt;/code&gt; at &lt;code&gt;./src/main/resources/META-INF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add some descriptions and API info&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can access it again via &lt;a href=&#34;http://localhost:8080/swagger-ui&#34; target=&#34;_blank&#34;&gt;http://localhost:8080/swagger-ui&lt;/a&gt; and check the result üòÉ&lt;/p&gt;
&lt;h2 id=&#34;dockerhub&#34;&gt;5. DockerHub&lt;/h2&gt;
&lt;p&gt;I want to turn it possible that anyone can go to DockerHub and pull the final image of my Echo app.&lt;/p&gt;
&lt;h3 id=&#34;build-the-native-image&#34;&gt;Build the Native Image&lt;/h3&gt;
&lt;p&gt;Quarkus let us build a complete native app, with no JVM needed to run. It is awesome mainly for a simple app like Echo, because it&amp;rsquo;s going to be crazing fast and in a incredible small and light image.&lt;/p&gt;
&lt;p&gt;To build the native image we need to have the pre-requisite setup as mentioned on &lt;a href=&#34;https://quarkus.io/guides/building-native-image&#34; target=&#34;_blank&#34;&gt;Quarkus docs&lt;/a&gt;, please follow the steps before continuing.&lt;/p&gt;
&lt;p&gt;Notes: please be aware of the compatibility of GraalVM and the current Quarkus framework. Quarkus is always trying to be as close as possible to the last GraalVM build but you need to check if they are already compatible with the current version. At this moment the last build of GraalVM is 19.3.0.r11 and Quarkus is compatible only with &lt;strong&gt;GraalVM 19.2.1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After install GraalVM (I did using &lt;a href=&#34;https://sdkman.io/&#34; target=&#34;_blank&#34;&gt;sdkman&lt;/a&gt;), Docker (or podman) and its dependencies, you can build the native package with this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw package -Pnative -Dquarkus.native.container-build=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to &lt;strong&gt;Quarkus&lt;/strong&gt; the build process is pretty much simple:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://quarkus.io/guides/images/native-executable-process.png&#34; alt=&#34;Quarkus Build Process&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So TL;TR it&amp;rsquo;s exactly like building a fat jar, but the execution to build a native app takes more time (and need more resources),&lt;/p&gt;
&lt;h4 id=&#34;important-notes-on-build-process&#34;&gt;Important Notes on Build Process&lt;/h4&gt;
&lt;p&gt;When building the native image with Docker on my Mac, I was getting this error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /Users/beto/IdeaProjects/opensource/echo/target/echo-1.0-SNAPSHOT-native-image-source-jar:/project:z --rm quay.io/quarkus/ubi-quarkus-native-image:19.2.1 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy$BySpaceAndTime -jar echo-1.0-SNAPSHOT-runner.jar -J-Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http -H:-JNI --no-server -H:-UseServiceLoaderFeature -H:+StackTrace echo-1.0-SNAPSHOT-runner
[echo-1.0-SNAPSHOT-runner:25] classlist: 12,165.10 ms
[echo-1.0-SNAPSHOT-runner:25] (cap): 1,720.23 ms
[echo-1.0-SNAPSHOT-runner:25] setup: 3,699.11 ms
14:23:23,903 INFO [org.jbo.threads] JBoss Threads version 3.0.0.Final
[echo-1.0-SNAPSHOT-runner:25] (typeflow): 17,087.39 ms
[echo-1.0-SNAPSHOT-runner:25] (objects): 12,944.17 ms
[echo-1.0-SNAPSHOT-runner:25] (features): 489.73 ms
[echo-1.0-SNAPSHOT-runner:25] analysis: 31,843.79 ms
[echo-1.0-SNAPSHOT-runner:25] (clinit): 622.07 ms
[echo-1.0-SNAPSHOT-runner:25] universe: 1,768.77 ms
[echo-1.0-SNAPSHOT-runner:25] (parse): 42,885.71 ms
[echo-1.0-SNAPSHOT-runner:25] (inline): 49,278.76 ms
[echo-1.0-SNAPSHOT-runner:25] (compile): 53,007.49 ms
[echo-1.0-SNAPSHOT-runner:25] compile: 158,081.96 ms
Error: Image build request failed with exit status 137
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 03:55 min
[INFO] Finished at: 2019-12-07T15:26:48+01:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal io.quarkus:quarkus-maven-plugin:1.0.1.Final:build (default) on project echo: Failed to build a runnable JAR: Failed to augment application classes: Build failure: Build failed due to errors
[ERROR] [error]: Build step io.quarkus.deployment.pkg.steps.NativeImageBuildStep#build threw an exception: java.lang.RuntimeException: Failed to build native image
[ERROR] at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:289)
[ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[ERROR] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR] at java.lang.reflect.Method.invoke(Method.java:498)
[ERROR] at io.quarkus.deployment.ExtensionLoader$1.execute(ExtensionLoader.java:941)
[ERROR] at io.quarkus.builder.BuildContext.run(BuildContext.java:415)
[ERROR] at io.quarkus.builder.BuildContext$$Lambda$109.0000000055C01130.run(Unknown Source)
[ERROR] at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
[ERROR] at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2011)
[ERROR] at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1535)
[ERROR] at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1426)
[ERROR] at java.lang.Thread.run(Thread.java:819)
[ERROR] at org.jboss.threads.JBossThread.run(JBossThread.java:479)
[ERROR] Caused by: java.lang.RuntimeException: Image generation failed
[ERROR] at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:278)
[ERROR] ... 13 more
[ERROR] -&amp;gt; [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I fount an issue on &lt;a href=&#34;https://github.com/quarkusio/quarkus/issues/1140&#34; target=&#34;_blank&#34;&gt;Quarkus GitHub&lt;/a&gt; related to it and, when I changed my Docker env to use 3Gb (instead of 2Gb by default), the build worked:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /Users/beto/IdeaProjects/opensource/echo/target/echo-1.0-SNAPSHOT-native-image-source-jar:/project:z --rm quay.io/quarkus/ubi-quarkus-native-image:19.2.1 -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy$BySpaceAndTime -jar echo-1.0-SNAPSHOT-runner.jar -J-Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http -H:-JNI --no-server -H:-UseServiceLoaderFeature -H:+StackTrace echo-1.0-SNAPSHOT-runner
[echo-1.0-SNAPSHOT-runner:24] classlist: 8,587.26 ms
[echo-1.0-SNAPSHOT-runner:24] (cap): 1,512.26 ms
[echo-1.0-SNAPSHOT-runner:24] setup: 3,112.68 ms
14:29:25,687 INFO [org.jbo.threads] JBoss Threads version 3.0.0.Final
[echo-1.0-SNAPSHOT-runner:24] (typeflow): 19,795.33 ms
[echo-1.0-SNAPSHOT-runner:24] (objects): 17,973.88 ms
[echo-1.0-SNAPSHOT-runner:24] (features): 486.83 ms
[echo-1.0-SNAPSHOT-runner:24] analysis: 39,734.95 ms
[echo-1.0-SNAPSHOT-runner:24] (clinit): 582.32 ms
[echo-1.0-SNAPSHOT-runner:24] universe: 2,178.24 ms
[echo-1.0-SNAPSHOT-runner:24] (parse): 5,333.97 ms
[echo-1.0-SNAPSHOT-runner:24] (inline): 9,494.69 ms
[echo-1.0-SNAPSHOT-runner:24] (compile): 29,119.41 ms
[echo-1.0-SNAPSHOT-runner:24] compile: 46,351.15 ms
[echo-1.0-SNAPSHOT-runner:24] image: 3,879.22 ms
[echo-1.0-SNAPSHOT-runner:24] write: 2,057.79 ms
[echo-1.0-SNAPSHOT-runner:24] [total]: 106,328.41 ms
[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 111589ms
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 02:00 min
[INFO] Finished at: 2019-12-07T15:30:59+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;prepare-the-image&#34;&gt;Prepare the Image&lt;/h4&gt;
&lt;p&gt;To generate the image locally we can run from root folder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -f src/main/docker/Dockerfile.native -t jjbeto/echo .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Sending build context to Docker daemon 36.77MB
Step 1/6 : FROM registry.access.redhat.com/ubi8/ubi-minimal
latest: Pulling from ubi8/ubi-minimal
645c2831c08a: Pull complete
5e98065763a5: Pull complete
Digest: sha256:32fb8bae553bfba2891f535fa9238f79aafefb7eff603789ba8920f505654607
Status: Downloaded newer image for registry.access.redhat.com/ubi8/ubi-minimal:latest
---&amp;gt; 469119976c56
Step 2/6 : WORKDIR /work/
---&amp;gt; Running in 4f74acf2fa46
Removing intermediate container 4f74acf2fa46
---&amp;gt; fc9bee94a0d0
Step 3/6 : COPY target/*-runner /work/application
---&amp;gt; b9a029618b01
Step 4/6 : RUN chmod 775 /work
---&amp;gt; Running in a37dd1eda18d
Removing intermediate container a37dd1eda18d
---&amp;gt; a686c7dba3ed
Step 5/6 : EXPOSE 8080
---&amp;gt; Running in 21f6e36ba8cb
Removing intermediate container 21f6e36ba8cb
---&amp;gt; 5d0d75543315
Step 6/6 : CMD [&amp;quot;./application&amp;quot;, &amp;quot;-Dquarkus.http.host=0.0.0.0&amp;quot;]
---&amp;gt; Running in 8a2dd88f45b2
Removing intermediate container 8a2dd88f45b2
---&amp;gt; 33592d7cd99d
Successfully built 33592d7cd99d
Successfully tagged jjbeto/echo:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if you list the local docker images:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
jjbeto/echo latest 33592d7cd99d 12 seconds ago 142MB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can finally run our image on Docker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i --rm -p 8080:8080 jjbeto/echo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the output is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2019-12-07 14:48:13,719 INFO [io.quarkus] (main) echo 1.0-SNAPSHOT (running on Quarkus 1.0.1.Final) started in 0.012s. Listening on: http://0.0.0.0:8080
2019-12-07 14:48:13,719 INFO [io.quarkus] (main) Profile prod activated.
2019-12-07 14:48:13,719 INFO [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, smallrye-openapi, swagger-ui]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome! And we can reach the service on localhost:&lt;/p&gt;
&lt;figure&gt;
&lt;a data-fancybox=&#34;&#34; href=&#34;localhost-8080.png&#34; data-caption=&#34;Localhost running on port 8080&#34;&gt;
&lt;img src=&#34;localhost-8080.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;
&lt;figcaption&gt;
Localhost running on port 8080
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But&amp;hellip; The image is still too big! 142MB is not a good size for such small service.. Right?&lt;/p&gt;
&lt;p&gt;I changed the &lt;code&gt;.src/main/docker/Dockerfile.native&lt;/code&gt; to use only the minimum files from &lt;code&gt;debian:10-slim&lt;/code&gt;, following a &lt;a href=&#34;https://github.com/quarkusio/quarkus/issues/326&#34; target=&#34;_blank&#34;&gt;very nice tip&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Stage 1 : intermediate container to copy the needed dynamic libraries
FROM debian:10-slim AS debian
## Stage 2 : create the final docker image
FROM scratch
COPY target/*-runner /bin/app
COPY --from=debian /lib64/ld-linux-x86-64.so.2 /lib64/ld-linux-x86-64.so.2
COPY --from=debian /lib/x86_64-linux-gnu/ld-2.28.so \
/lib/x86_64-linux-gnu/libm.so.6 /lib/x86_64-linux-gnu/libm-2.28.so \
/lib/x86_64-linux-gnu/libpthread.so.0 /lib/x86_64-linux-gnu/libpthread-2.28.so \
/lib/x86_64-linux-gnu/libdl.so.2 /lib/x86_64-linux-gnu/libdl-2.28.so \
/lib/x86_64-linux-gnu/libz.so.1 /lib/x86_64-linux-gnu/libz.so.1.2.11 \
/lib/x86_64-linux-gnu/librt.so.1 /lib/x86_64-linux-gnu/librt-2.28.so \
/lib/x86_64-linux-gnu/libc.so.6 /lib/x86_64-linux-gnu/libc-2.28.so \
/lib/x86_64-linux-gnu/
EXPOSE 8080
CMD [&amp;quot;/bin/app&amp;quot;, &amp;quot;-Dquarkus.http.host=0.0.0.0&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now my image has a more reasonable size: 44.5MB&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
jjbeto/echo latest 3d7de934bcd4 29 seconds ago 44.5MB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the final result on DockerHub is different:&lt;/p&gt;
&lt;figure&gt;
&lt;a data-fancybox=&#34;&#34; href=&#34;dockerhub.png&#34; data-caption=&#34;Image on DockerHub&#34;&gt;
&lt;img src=&#34;dockerhub.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;
&lt;figcaption&gt;
Image on DockerHub
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;15MB?? Now we are talking!! üòé&lt;/p&gt;
&lt;p&gt;Do you know how to make it even smaller? Please drop a message! üì´&lt;/p&gt;
&lt;h4 id=&#34;how-to-publish-on-dockerhub&#34;&gt;How to Publish on DockerHub?&lt;/h4&gt;
&lt;p&gt;To publish the image on DockerHub is pretty simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Login by &lt;code&gt;docker login&lt;/code&gt; and give your username/password&lt;/li&gt;
&lt;li&gt;Push the local image to remote using the command &lt;code&gt;docker push &amp;lt;image_name&amp;gt;&lt;/code&gt;, in my case it was &lt;code&gt;docker push jjbeto/echo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://hub.docker.com/r/jjbeto/echo&#34; target=&#34;_blank&#34;&gt;DockerHub&lt;/a&gt; and check it üéâ&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;6. Conclusion&lt;/h2&gt;
&lt;p&gt;Quarkus is an amazing tool and brings a lot of power to the Java world in my opinion. It&amp;rsquo;s easy to use, has already a lot of built-in tools (like Spring-Boot maybe?) that make it possible to build good apps in a fraction of time.&lt;/p&gt;
&lt;p&gt;But please don&amp;rsquo;t be silly, Quarkus is not for everyone and not for everything! As it&amp;rsquo;s using GraalVM you can&amp;rsquo;t use any library out there, because you can have reflection problems for example.&lt;/p&gt;
&lt;p&gt;If you can use Quarkus library standards, Quarkus is for sure something to consider for your project.&lt;/p&gt;
&lt;p&gt;About the Echo App, it was a good choice to use Quarkus and I want to use this app in a near future to do more testing and labs withs microservices environments, stay tuned! üòé&lt;/p&gt;</description></item><item><title>Complete Setup for this Website - Part 1</title><link>https://jjbeto.com/blog/2019/11/30/developing_this_blog_with_hugo_part_1/</link><pubDate>Sat, 30 Nov 2019 14:00:00 +0000</pubDate><guid>https://jjbeto.com/blog/2019/11/30/developing_this_blog_with_hugo_part_1/</guid><description>
&lt;p&gt;&lt;aside&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;header&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;/header&gt;
- &lt;a href=&#34;#overview&#34;&gt;1. Overview&lt;/a&gt;
- &lt;a href=&#34;#goal&#34;&gt;2. The Goal&lt;/a&gt;
- &lt;a href=&#34;#setup&#34;&gt;3. Setup&lt;/a&gt;
- &lt;a href=&#34;#where-am-i&#34;&gt;4. Ok, so.. Where am I?&lt;/a&gt;
- &lt;a href=&#34;#resume&#34;&gt;5. First Page: Resume&lt;/a&gt;
- &lt;a href=&#34;#homepage-review&#34;&gt;6. Home Page: Review&lt;/a&gt;
- &lt;a href=&#34;#blogging&#34;&gt;7. Blogging&lt;/a&gt;
- &lt;a href=&#34;#publish&#34;&gt;8. Publish&lt;/a&gt;
- &lt;a href=&#34;#conclusion&#34;&gt;9. Conclusion&lt;/a&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;!--endtoc--&gt;&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;1. Overview&lt;/h2&gt;
&lt;p&gt;So I&amp;rsquo;ve finally decide to have a blog-like website üèÜ. And no, the &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; that we are going to talk about in this first post is not from &lt;a href=&#34;https://en.wikipedia.org/wiki/Hugo_(franchise)&#34; target=&#34;_blank&#34;&gt;Hugo Game&lt;/a&gt; üòÇ&lt;/p&gt;
&lt;p&gt;Whatever&amp;hellip; I do like tech, travel, beers, and a couple of other stuff, I think that I can share a bit of this experience with anybody that wants to take some time to read about it ü§ì&lt;/p&gt;
&lt;p&gt;As my first post, &lt;strong&gt;I want to share my personal experience with &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt;, for this you can find the complete source code on my &lt;a href=&#34;https://github.com/jjbeto/jjbeto.github.io/tree/source&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; (pay attention to the branch üòâ).&lt;/p&gt;
&lt;h2 id=&#34;goal&#34;&gt;2. The Goal&lt;/h2&gt;
&lt;p&gt;For me blogging shouldn&amp;rsquo;t be so complex to setup, and actually it isn&amp;rsquo;t. For complex blog providers which brings a lot of fancy features and also has no manage multiple blogs in the same structure, it&amp;rsquo;s obviously going to be way more complex to maintain the entire application and it&amp;rsquo;s infrastructure.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s not my case.&lt;/p&gt;
&lt;p&gt;What I need is just a place to put my notes, share some content that may be useful and start nice talks about technology (mainly, but not only).&lt;/p&gt;
&lt;p&gt;So I did some research and I finally choose &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;. You can find a lot of posts comparing different static website generators (for blog or general purposes like Hugo), but I&amp;rsquo;m not going too much into it here. If you want to go a bit deeper you can find some nice comparisons &lt;a href=&#34;https://www.techiediaries.com/jekyll-hugo-hexo/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://stackshare.io/stackups/hexo-vs-hugo-vs-jekyll&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; just to start.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s blog ü§ì&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;3. Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;To install Hugo you can follow &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34;&gt;this steps&lt;/a&gt; from Hugo docs;
&lt;ul&gt;
&lt;li&gt;I choose to install with &lt;code&gt;brew&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;To setup the initial environment I have followed &lt;a href=&#34;https://sourcethemes.com/academic/docs/install/&#34; target=&#34;_blank&#34;&gt;this steps&lt;/a&gt; from Academics docs;
&lt;ul&gt;
&lt;li&gt;I decided to use the &amp;lsquo;Install with Git&amp;rsquo; option just to keep the credits on the original repo via &lt;code&gt;forked from&lt;/code&gt; mentioning üòÑ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After doing the basic installation steps according to Hugo&amp;rsquo;s and Academic&amp;rsquo;s websites, I&amp;rsquo;ve entered on the website root folder and ran this command to test locally:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
&lt;a data-fancybox=&#34;&#34; href=&#34;1-hugo_serve.png&#34; data-caption=&#34;Running hugo server on command line&#34;&gt;
&lt;img src=&#34;1-hugo_serve.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;
&lt;figcaption&gt;
Running &lt;code&gt;hugo server&lt;/code&gt; on command line
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then accessing &lt;a href=&#34;http://localhost:1313/&#34; target=&#34;_blank&#34;&gt;localhost&lt;/a&gt; you can find something like this:&lt;/p&gt;
&lt;figure&gt;
&lt;a data-fancybox=&#34;&#34; href=&#34;2-first-home-view.png&#34; data-caption=&#34;Initial home page&#34;&gt;
&lt;img src=&#34;2-first-home-view.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;
&lt;figcaption&gt;
Initial home page
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Nice, we have a complete blog-template running locally üò¨&lt;/p&gt;
&lt;h2 id=&#34;where-am-i&#34;&gt;4. Ok, so.. Where am I?&lt;/h2&gt;
&lt;p&gt;Yes! It&amp;rsquo;s alive! But, then.. Now what? There is dozens of files everywhere and a lot of pages and things that actually I don&amp;rsquo;t need at all. I found a good post about this &lt;a href=&#34;https://andreaczhang.rbind.io/post/my-1st-blogpost/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and indeed, it&amp;rsquo;s quite overwhelming.&lt;/p&gt;
&lt;p&gt;But ok, first things first: let&amp;rsquo;s clean up the code and define the &lt;a href=&#34;https://en.wikipedia.org/wiki/Minimum_viable_product&#34; target=&#34;_blank&#34;&gt;MVP&lt;/a&gt;, right?&lt;/p&gt;
&lt;h3 id=&#34;4-1-config-toml-params-toml&#34;&gt;4.1. config.toml &amp;amp; params.toml&lt;/h3&gt;
&lt;p&gt;Not much to do, just url, mail contacts and basic information (also some minimal theme configuration).
The documentation in the files itself is pretty good and self explanatory, but you can also see extra features on &lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/&#34; target=&#34;_blank&#34;&gt;Academic docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;4-2-minimum-pages-and-content-organization&#34;&gt;4.2. Minimum Pages and Content Organization&lt;/h3&gt;
&lt;p&gt;According to &lt;a href=&#34;https://gohugo.io/content-management/organization/&#34; target=&#34;_blank&#34;&gt;Hugo&amp;rsquo;s docs&lt;/a&gt; the base organization is directory/file based, as you can see in their sampe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
‚îî‚îÄ‚îÄ content
‚îî‚îÄ‚îÄ about
| ‚îî‚îÄ‚îÄ index.md // &amp;lt;- https://example.com/about/
‚îú‚îÄ‚îÄ posts
| ‚îú‚îÄ‚îÄ firstpost.md // &amp;lt;- https://example.com/posts/firstpost/
| ‚îú‚îÄ‚îÄ happy
| | ‚îî‚îÄ‚îÄ ness.md // &amp;lt;- https://example.com/posts/happy/ness/
| ‚îî‚îÄ‚îÄ secondpost.md // &amp;lt;- https://example.com/posts/secondpost/
‚îî‚îÄ‚îÄ quote
‚îú‚îÄ‚îÄ first.md // &amp;lt;- https://example.com/quote/first/
‚îî‚îÄ‚îÄ second.md // &amp;lt;- https://example.com/quote/second/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I decided to try to bring some sense to this &lt;code&gt;chaos&lt;/code&gt; using simple pattern: on &lt;code&gt;posts&lt;/code&gt; folder I&amp;rsquo;m going to organize the posts using the date structure &lt;code&gt;year/month/day&lt;/code&gt; and put all related data to that post in this folder, if I want to add multiple posts in the same day I can also control it using &lt;code&gt;post-path/index.md&lt;/code&gt; pattern. I&amp;rsquo;m also going to rename folder &lt;code&gt;posts&lt;/code&gt; to &lt;code&gt;blog&lt;/code&gt; (in my sense it is more meaningful, also url-wise). So the blog content will be organized like that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
‚îî‚îÄ‚îÄ content
‚îî‚îÄ‚îÄ blog
‚îî‚îÄ‚îÄ 2019
‚îî‚îÄ‚îÄ 11
| ‚îî‚îÄ‚îÄ 30
| ‚îî‚îÄ‚îÄ developing_this_blog_with_hugo.md // &amp;lt;- https://jjbeto.com/blog/2019/11/30/developing_this_blog_with_hugo/
‚îî-- 12
‚îî-- 01
‚îî‚îÄ‚îÄ following_awesome_post.md // &amp;lt;- https://jjbeto.com/blog/2019/12/05/following_awesome_post/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way it&amp;rsquo;s possible to aggregate related content in one place, track down by date and maybe in the future create some plugin to deal better with the content per directory (who knows?).&lt;/p&gt;
&lt;p&gt;Aside of the post organization, I need to decide also about general content, so initially I&amp;rsquo;m going to prepare the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Page&lt;/th&gt;
&lt;th&gt;Motivation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;About (Hugo&amp;rsquo;s default author&amp;rsquo;s page)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Too Long To Read&lt;/code&gt; resume&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resume&lt;/td&gt;
&lt;td&gt;It&amp;rsquo;s good to have it online and also test features üòÑ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Contact&lt;/td&gt;
&lt;td&gt;Er, to get in touch via social media&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Posts Root Page &lt;code&gt;/blog&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;To has a root page for blog posts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Next is to add more featured pages like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Courses: for tutorial-like purposes like this one ü§î&lt;/li&gt;
&lt;li&gt;Talks: for meetups and/or talks that I find interesting to track&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All basic plan is defined. Let&amp;rsquo;s start to work on it üòÑ&lt;/p&gt;
&lt;h2 id=&#34;resume&#34;&gt;5. First Page: Resume&lt;/h2&gt;
&lt;p&gt;The default Academic&amp;rsquo;s home page is just too crowded (obviously, they want to show off as much features as possible, right?), and as this theme is more related to academic&amp;rsquo;s in general, there is a lot of really good tools/pages to help you to &lt;em&gt;show yourself&lt;/em&gt;, but I want a cleaner homepage, with only latest news and a quick presentation about myself.&lt;/p&gt;
&lt;p&gt;So I decided to create a &lt;code&gt;resume&lt;/code&gt; folder and see how it looks like to use Academic&amp;rsquo;s features, and also learn a bit of page builder and content organization. This can clean up my home page but maintaining a lot of cool features in the website anyway for who is interested: you can &lt;a href=&#34;https://github.com/jjbeto/jjbeto.github.io/tree/source/content/resume&#34; target=&#34;_blank&#34;&gt;fork my website&amp;rsquo;s repo on GitHub&lt;/a&gt; and update the &lt;code&gt;resume&lt;/code&gt; folder according to your needs and just add this folder to your Hugo&amp;rsquo;s website.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create folder &lt;code&gt;./content/resume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create file &lt;code&gt;./content/resume/index.md&lt;/code&gt; to define the widget: in my case it&amp;rsquo;s just an empty page where I want to add sections like the homepage does&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Resume&amp;quot;
date: &amp;quot;2019-11-30T12:00:00Z&amp;quot;
type: &amp;quot;widget_page&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;code&gt;./content/home/about.md&lt;/code&gt; to &lt;code&gt;.content/resume/&lt;/code&gt; to work as the homepage&amp;rsquo;s ref&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move &lt;code&gt;./content/home/accomplishments.md&lt;/code&gt;, &lt;code&gt;./content/home/skills.md&lt;/code&gt; and &lt;code&gt;./content/home/experience.md&lt;/code&gt; to &lt;code&gt;.content/resume/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Duplicate &lt;code&gt;./content/resume/accomplishments.md&lt;/code&gt; to &lt;code&gt;./content/resume/certifications.md&lt;/code&gt; to reuse the feature, separating certificates from on-line courses&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fullfil the data! Changing the data on &lt;code&gt;./content/authors/admin/_index.md&lt;/code&gt; (which I renamed to &lt;code&gt;./content/authors/jjbeto/_index.md&lt;/code&gt;) and updating the other pages on &lt;code&gt;.content/resume/&lt;/code&gt; with custom data is enought to have a really nice page already&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
&lt;a data-fancybox=&#34;&#34; href=&#34;3-resume-view.png&#34; data-caption=&#34;Resume initial page&#34;&gt;
&lt;img src=&#34;3-resume-view.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;
&lt;figcaption&gt;
Resume initial page
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Another small CSS trick is &lt;a href=&#34;https://varya.me/en/posts/pseudo-tag-cloud-css/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;: creating a small tag cloud for my experience stack list:&lt;/p&gt;
&lt;figure&gt;
&lt;a data-fancybox=&#34;&#34; href=&#34;4-cloud-tags.png&#34; data-caption=&#34;Cloud tags&#34;&gt;
&lt;img src=&#34;4-cloud-tags.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;
&lt;figcaption&gt;
Cloud tags
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;How to do it here? You can check the &lt;a href=&#34;https://github.com/jjbeto/jjbeto.github.io/tree/source/content/resume/experience.md&#34; target=&#34;_blank&#34;&gt;source code&lt;/a&gt;, but to make it easier, you will need 2 things:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- The HTML for the cloud --&amp;gt;
&amp;lt;div class=&amp;quot;cloud_wrapper&amp;quot;&amp;gt;
&amp;lt;ul class=&amp;quot;cloud&amp;quot;&amp;gt;
&amp;lt;li&amp;gt;Item 01&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Item 02&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
...
&amp;lt;!-- The CSS for the cloud --&amp;gt;
&amp;lt;style&amp;gt;
.cloud_wrapper { text-align: center; }
.cloud { display: inline; list-style-type: none; width: 80%; margin: auto; }
.cloud li { list-style: none; display: inline; margin: 2px; }
.cloud li:nth-of-type(3n+1) { font-size: 1.25em; }
.cloud li:nth-of-type(4n+3) { font-size: 1.5em; }
.cloud li:nth-of-type(5n-3) { font-size: 1em; }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another thing that I want to add is &lt;a href=&#34;http://konpa.github.io/devicon/&#34; target=&#34;_blank&#34;&gt;devicons&lt;/a&gt; so that I can list the tech stack that I&amp;rsquo;m using!&lt;/p&gt;
&lt;p&gt;To do so, I&amp;rsquo;ve added to the end of &lt;code&gt;./content/resume/skills.md&lt;/code&gt; the ref style:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.rawgit.com/konpa/devicon/df6431e323547add1b4cf45992913f15286456d3/devicon.min.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that I can use the icon this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[[feature]]
icon = &amp;quot;apache-plain&amp;quot;
icon_pack = &amp;quot;devicon&amp;quot;
name = &amp;quot;Apache&amp;quot;
description = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There should be a way to add this style to the root page and reuse it everywhere in the website, but I didn&amp;rsquo;t look into it for now because for now I just want to use it inside &lt;code&gt;./content/resume/skills.md&lt;/code&gt; (so, no need to download this css elsewhere).&lt;/p&gt;
&lt;p&gt;Awesome, right?! Now we can play around with the current page list on the &lt;code&gt;.content/resume/&lt;/code&gt; folder and change everything that may be useful (and remove pages that don&amp;rsquo;t match with your needs).&lt;/p&gt;
&lt;h2 id=&#34;homepage-review&#34;&gt;6. Home Page: Review&lt;/h2&gt;
&lt;p&gt;So with the &lt;a href=&#34;https://jjbeto.com/resume/&#34;&gt;resume page&lt;/a&gt; settled, we can finish off the home page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activate &lt;code&gt;./content/home/hero.md&lt;/code&gt; to use as a first welcome;&lt;/li&gt;
&lt;li&gt;Disable the following pages (not removing because I may use some of then soon):
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./content/home/featured.md&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./content/home/projects.md&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./content/home/publications.md&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./content/home/tags.md&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./content/home/talks.md&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve renamed the base folder &lt;code&gt;./content/post&lt;/code&gt; to &lt;code&gt;./content/blog&lt;/code&gt; previously, because of that the homepage widget &lt;code&gt;./content/home/posts.md&lt;/code&gt; stops to work! No, actually the type of items to list on the default page is marked to be &lt;code&gt;post&lt;/code&gt;, so I just changed it to &lt;code&gt;blog&lt;/code&gt; instead (my new folder name) and that&amp;rsquo;s it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[content]
# Page type to display. E.g. post, talk, or publication.
page_type = &amp;quot;blog&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another small change that I&amp;rsquo;ve done was about the favicon (that small icon set for your page). To change that first I needed to find where it is set: &lt;code&gt;./themes/academic/layout/partials/site_head.html&lt;/code&gt; at line &lt;code&gt;125&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/png&amp;quot; href=&amp;quot;{{ &amp;quot;img/icon-32.png&amp;quot; | relURL }}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Academics theme has it&amp;rsquo;s own Icon set at &lt;code&gt;./themes/academic/static/img/icon-32.png&lt;/code&gt;, so everything that I need to do is overwrite this with my own file on my root static folder &lt;code&gt;.static/img&lt;/code&gt;, adding a PNG with the same name ü•á&lt;/p&gt;
&lt;p&gt;But which icon should I use? ü§î&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve decided to not go too much into it for now, so I went to &lt;a href=&#34;http://fa2png.io/icons/&#34; target=&#34;_blank&#34;&gt;this cool website&lt;/a&gt; and generate an icon based on &lt;a href=&#34;https://konpa.github.io/devicon/&#34; target=&#34;_blank&#34;&gt;Devicons&lt;/a&gt;! Just placing the PNG at &lt;code&gt;.static/img/icon-32.png&lt;/code&gt; is enough!&lt;/p&gt;
&lt;p&gt;Ok, completely clean home page and also a nice Resume page is settled!&lt;/p&gt;
&lt;h2 id=&#34;blogging&#34;&gt;7. Blogging&lt;/h2&gt;
&lt;p&gt;To create a post we just need to write a lot of cool stuff and post it, right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The answer is: no, not really.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m kind of methodic, I don&amp;rsquo;t like to read blogs or sites that looks too flooded with information and mainly: I hate to look at a content and fill confused to follow up. Well I&amp;rsquo;m sure that I&amp;rsquo;m not a good writer myself, and English is not my mother language too, so it&amp;rsquo;s kinda complicated to get things done without too much mess.&lt;/p&gt;
&lt;p&gt;For that I did some research about &lt;code&gt;how to organize my posts in a way that somebody else can understands it&lt;/code&gt; and&amp;hellip; No lucky üòÖ&lt;/p&gt;
&lt;p&gt;So as a first try out, I&amp;rsquo;ve decided to post as mini-publications, like one of my favorite Java-related blogs (&lt;a href=&#34;https://www.baeldung.com/&#34; target=&#34;_blank&#34;&gt;Baeldung&lt;/a&gt;) does:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a base structure for a post:
&lt;ul&gt;
&lt;li&gt;Overview&lt;/li&gt;
&lt;li&gt;Items&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use all possible tools to show examples&lt;/li&gt;
&lt;li&gt;Give a repository &lt;a href=&#34;https://github.com/jjbeto/jjbeto.github.io/tree/source/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; in the end to show a &lt;a href=&#34;https://jjbeto.com&#34; target=&#34;_blank&#34;&gt;running demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an extra tool, I&amp;rsquo;m going to create a &lt;code&gt;Table of Contents&lt;/code&gt; as a fist item in each post to make it easier going around it.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible to check &lt;a href=&#34;https://github.com/jjbeto/jjbeto.github.io/tree/source/content/blog/2019/11/30/developing_this_blog_with_hugo_part_1/index.md&#34; target=&#34;_blank&#34;&gt;in the source code of this page&lt;/a&gt;, but I&amp;rsquo;ll list some points that took me a fill extra time to figure it out how to do:&lt;/p&gt;
&lt;h3 id=&#34;7-1-anchors-and-table-of-content&#34;&gt;7.1. Anchors and Table of Content&lt;/h3&gt;
&lt;p&gt;I didn&amp;rsquo;t find an easy way to create a Table of Contents for Hugo or Academic Theme, but I&amp;rsquo;ve found &lt;a href=&#34;https://discourse.gohugo.io/t/creating-anchors-in-hugo-pages-solved/9552&#34; target=&#34;_blank&#34;&gt;in this post&lt;/a&gt; a &lt;a href=&#34;https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content/posts/link-to-headings-by-name.md&#34; target=&#34;_blank&#34;&gt;helpful link&lt;/a&gt; to make it to work.&lt;/p&gt;
&lt;p&gt;Now every post will start with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;aside&amp;gt;
&amp;lt;div class=&amp;quot;ox-hugo-toc toc&amp;quot;&amp;gt;
&amp;lt;header&amp;gt;
&amp;lt;h2&amp;gt;Table of Contents&amp;lt;/h2&amp;gt;
&amp;lt;/header&amp;gt;
- [1. Overview](#overview)
- [2. Item](#item)
- [3. Conclusion](#conclusion)
&amp;lt;/div&amp;gt;
&amp;lt;/aside&amp;gt;
&amp;lt;!--endtoc--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way is very simple to follow the actual &lt;code&gt;Table of Contents&lt;/code&gt; in the post and also in the code. If somebody see this post and have other ideas to make it better, &lt;strong&gt;please let me know!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t know what a &lt;code&gt;HTML Anchor&lt;/code&gt; is, you should &lt;a href=&#34;https://lmgtfy.com/?q=html+anchor&#34; target=&#34;_blank&#34;&gt;search more&lt;/a&gt; about it üòÑ&lt;/p&gt;
&lt;h3 id=&#34;7-2-handling-images&#34;&gt;7.2. Handling Images&lt;/h3&gt;
&lt;p&gt;As a folder-centric framework, I&amp;rsquo;m going to store related files all together in the same folder. You can check this on this post &lt;a href=&#34;https://github.com/jjbeto/jjbeto.github.io/tree/source/content/blog/2019/11/30/developing_this_blog_with_hugo_part_1/&#34; target=&#34;_blank&#34;&gt;source code&lt;/a&gt;), and by the end it was incredibly easy to show the image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;![This is an image](featured.jpg)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only problem is that this way you will have a static image directly on the post body, also depending on the image size you can have problems to see it properly. Then I found interesting &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/6d92b0e8ab5512a4489173a560b27adf91c0b260/exampleSite&#34; target=&#34;_blank&#34;&gt;sample folder&lt;/a&gt; with nice image handling, for more about this go to the &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/#example-figure-input&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also point to the real url, it&amp;rsquo;s also fine üòÑ&lt;/p&gt;
&lt;h2 id=&#34;publish&#34;&gt;8. Publish&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;TL;TR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Execute the following command to generate your final website:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo --gc --minify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, a folder &lt;code&gt;public&lt;/code&gt; will be generated with the static site in it, what you need to do is commit/push all the files in a GitHub Repository called &lt;code&gt;&amp;lt;your github user&amp;gt;.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all, you can already access &lt;code&gt;&amp;lt;your github user&amp;gt;.github.io&lt;/code&gt; and be happy ‚≠êÔ∏è&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are plenty of content about how to setup Hugo Websites on GitHub Pages, for example on Hugo&amp;rsquo;s &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34; target=&#34;_blank&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But to be honest, I think that it should be done automatically by some &lt;a href=&#34;https://medium.com/@nirespire/what-is-cicd-concepts-in-continuous-integration-and-deployment-4fe3f6625007&#34; target=&#34;_blank&#34;&gt;CI/CD&lt;/a&gt; tool. It&amp;rsquo;s a bit more complex and I&amp;rsquo;m going to talk more about it in a &lt;strong&gt;next post&lt;/strong&gt;!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;9. Conclusion&lt;/h2&gt;
&lt;p&gt;It was a looooong first post, wow! Next time I&amp;rsquo;ll try to be more concise (maybe).&lt;/p&gt;
&lt;p&gt;Hugo is very helpful, has a big community, really good themes/plugins and extensive documentation. It&amp;rsquo;s obviously a great tool to use, very intuitive and easy to get used to.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m looking forward to use other features, like Google Analytics and Comments integration with social media! Stay tuned for next posts where I&amp;rsquo;m going to talk about web performance at Hugo, CI/CD (with &lt;strong&gt;GitHub Actions&lt;/strong&gt;), Google Analytics, Comments and more.&lt;/p&gt;</description></item></channel></rss>